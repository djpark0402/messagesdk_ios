// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.10 (swiftlang-5.10.0.13 clang-1500.3.9.4)
// swift-module-flags: -target arm64-apple-ios15.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -enable-bare-slash-regex -module-name OpenDID_DataModel
import Foundation
@_exported import OpenDID_DataModel
import Swift
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
public struct VerifiablePresentation : OpenDID_DataModel.Jsonable, OpenDID_DataModel.ProofsContainer, Swift.Identifiable {
  public var context: [Swift.String]
  public var id: Swift.String
  public var type: [Swift.String]
  public var holder: Swift.String
  @OpenDID_DataModel.UTCDatetime public var validFrom: Swift.String {
    get
    set
    _modify
  }
  @OpenDID_DataModel.UTCDatetime public var validUntil: Swift.String {
    get
    set
    _modify
  }
  public var verifierNonce: Swift.String
  public var verifiableCredential: [OpenDID_DataModel.VerifiableCredential]
  public var proof: OpenDID_DataModel.Proof?
  public var proofs: [OpenDID_DataModel.Proof]?
  public typealias ID = Swift.String
}
extension OpenDID_DataModel.VerifiablePresentation {
  public init(holder: Swift.String, @OpenDID_DataModel.UTCDatetime validFrom: Swift.String, @OpenDID_DataModel.UTCDatetime validUntil: Swift.String, verifierNonce: Swift.String, verifiableCredential: [OpenDID_DataModel.VerifiableCredential])
}
extension OpenDID_DataModel.VerifiablePresentation : Swift.Codable {
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum ProfileType : Swift.String, Swift.Codable {
  case IssueProfile
  case VerifyProfile
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public struct LogoImage : OpenDID_DataModel.Jsonable {
  public enum LogoImageType : Swift.String, Swift.Codable {
    case jpg
    case png
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
  public var format: OpenDID_DataModel.LogoImage.LogoImageType
  public var link: Swift.String?
  public var value: Swift.String?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct ProviderDetail : OpenDID_DataModel.Jsonable {
  public var did: Swift.String
  public var certVcRef: Swift.String
  public var name: Swift.String
  public var description: Swift.String?
  public var logo: OpenDID_DataModel.LogoImage?
  public var ref: Swift.String?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct ReqE2e : OpenDID_DataModel.Jsonable, OpenDID_DataModel.ProofContainer {
  public var nonce: Swift.String
  public var curve: OpenDID_DataModel.EllipticCurveType
  public var publicKey: Swift.String
  public var cipher: OpenDID_DataModel.SymmetricCipherType
  public var padding: OpenDID_DataModel.SymmetricPaddingType
  public var proof: OpenDID_DataModel.Proof?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct IssueProfile : OpenDID_DataModel.Jsonable, OpenDID_DataModel.ProofContainer {
  public struct Profile : OpenDID_DataModel.Jsonable {
    public struct CredentialSchema : OpenDID_DataModel.Jsonable {
      public var id: Swift.String
      public var type: OpenDID_DataModel.CredentialSchemaType
      public var value: Swift.String?
      public func encode(to encoder: any Swift.Encoder) throws
      public init(from decoder: any Swift.Decoder) throws
    }
    public struct Process : OpenDID_DataModel.Jsonable {
      public var endpoints: [Swift.String]
      public var reqE2e: OpenDID_DataModel.ReqE2e
      public var issuerNonce: Swift.String
      public func encode(to encoder: any Swift.Encoder) throws
      public init(from decoder: any Swift.Decoder) throws
    }
    public var issuer: OpenDID_DataModel.ProviderDetail
    public var credentialSchema: OpenDID_DataModel.IssueProfile.Profile.CredentialSchema
    public var process: OpenDID_DataModel.IssueProfile.Profile.Process
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
  public var id: Swift.String
  public var type: OpenDID_DataModel.ProfileType
  public var title: Swift.String
  public var description: Swift.String?
  public var logo: OpenDID_DataModel.LogoImage?
  public var encoding: Swift.String
  public var language: Swift.String
  public var profile: OpenDID_DataModel.IssueProfile.Profile
  public var proof: OpenDID_DataModel.Proof?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct VerifyProfile : OpenDID_DataModel.Jsonable, OpenDID_DataModel.ProofContainer {
  public struct Profile : OpenDID_DataModel.Jsonable {
    public struct ProfileFilter : OpenDID_DataModel.Jsonable {
      public struct CredentialSchema : OpenDID_DataModel.Jsonable {
        public var id: Swift.String
        public var type: OpenDID_DataModel.CredentialSchemaType
        public var value: Swift.String?
        public var displayClaims: [Swift.String]?
        public var requiredClaims: [Swift.String]?
        public var allowedIssuers: [Swift.String]?
        public func encode(to encoder: any Swift.Encoder) throws
        public init(from decoder: any Swift.Decoder) throws
      }
      public var credentialSchemas: [OpenDID_DataModel.VerifyProfile.Profile.ProfileFilter.CredentialSchema]
      public func encode(to encoder: any Swift.Encoder) throws
      public init(from decoder: any Swift.Decoder) throws
    }
    public struct Process : OpenDID_DataModel.Jsonable {
      public var endpoints: [Swift.String]?
      public var reqE2e: OpenDID_DataModel.ReqE2e
      public var verifierNonce: Swift.String
      public var authType: OpenDID_DataModel.VerifyAuthType?
      public func encode(to encoder: any Swift.Encoder) throws
      public init(from decoder: any Swift.Decoder) throws
    }
    public var verifier: OpenDID_DataModel.ProviderDetail
    public var filter: OpenDID_DataModel.VerifyProfile.Profile.ProfileFilter
    public var process: OpenDID_DataModel.VerifyProfile.Profile.Process
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
  public var id: Swift.String
  public var type: OpenDID_DataModel.ProfileType
  public var title: Swift.String
  public var description: Swift.String?
  public var logo: OpenDID_DataModel.LogoImage?
  public var encoding: Swift.String
  public var language: Swift.String
  public var profile: OpenDID_DataModel.VerifyProfile.Profile
  public var proof: OpenDID_DataModel.Proof?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct DIDDocument : OpenDID_DataModel.Jsonable, OpenDID_DataModel.ProofsContainer {
  public var context: [Swift.String]
  public var id: Swift.String
  public var controller: Swift.String
  public var verificationMethod: [OpenDID_DataModel.DIDDocument.VerificationMethod]
  public var assertionMethod: [Swift.String]?
  public var authentication: [Swift.String]?
  public var keyAgreement: [Swift.String]?
  public var capabilityInvocation: [Swift.String]?
  public var capabilityDelegation: [Swift.String]?
  public var service: [OpenDID_DataModel.DIDDocument.Service]?
  @OpenDID_DataModel.UTCDatetime public var created: Swift.String {
    get
    set
    _modify
  }
  @OpenDID_DataModel.UTCDatetime public var updated: Swift.String {
    get
    set
    _modify
  }
  @OpenDID_DataModel.DIDVersionId public var versionId: Swift.String {
    get
    set
    _modify
  }
  public var deactivated: Swift.Bool
  public var proof: OpenDID_DataModel.Proof?
  public var proofs: [OpenDID_DataModel.Proof]?
  public struct VerificationMethod : OpenDID_DataModel.Jsonable {
    public var id: Swift.String
    public var type: OpenDID_DataModel.DIDDocument.DIDKeyType
    public var controller: Swift.String
    public var publicKeyMultibase: Swift.String
    public var authType: OpenDID_DataModel.AuthType
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
  public struct Service : OpenDID_DataModel.Jsonable {
    public var id: Swift.String
    public var type: OpenDID_DataModel.DIDDocument.DIDServiceType
    public var serviceEndpoint: [Swift.String]
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
  public enum DIDKeyType : Swift.String, Swift.Codable {
    case rsaVerificationKey2018
    case secp256k1VerificationKey2018
    case secp256r1VerificationKey2018
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
  public enum DIDServiceType : Swift.String, Swift.Codable {
    case linkedDomains
    case credentialRegistry
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
}
extension OpenDID_DataModel.DIDDocument {
  public init(id: Swift.String, controller: Swift.String? = nil, @OpenDID_DataModel.UTCDatetime created: Swift.String)
}
extension OpenDID_DataModel.DIDDocument : Swift.Codable {
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum ClaimType : Swift.String, Swift.Codable {
  case text
  case image
  case document
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum ClaimFormat : Swift.String, Swift.Codable {
  case plain
  case html
  case xml
  case csv
  case png
  case jpg
  case gif
  case txt
  case pdf
  case word
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum Location : Swift.String, Swift.Codable {
  case inline
  case remote
  case attach
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum ProofPurpose : Swift.String, Swift.Codable {
  case assertionMethod
  case authentication
  case keyAgreement
  case capabilityInvocation
  case capabilityDelegation
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum ProofType : Swift.String, Swift.Codable {
  case rsaSignature2018
  case secp256k1Signature2018
  case secp256r1Signature2018
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum AlgorithmType : Swift.String, Swift.Codable {
  case rsa
  case secp256k1
  case secp256r1
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum CredentialSchemaType : Swift.String, Swift.Codable {
  case osdSchemaCredential
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum EllipticCurveType : Swift.String, Swift.Codable {
  case secp256k1
  case secp256r1
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum SymmetricCipherType : Swift.String, Swift.Codable {
  case aes128CBC
  case aes128ECB
  case aes256CBC
  case aes256ECB
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum SymmetricPaddingType : Swift.String, Swift.Codable {
  case noPad
  case pkcs5
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum AuthType : Swift.Int, Swift.Codable {
  case free
  case pin
  case bio
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public struct VerifyAuthType : Swift.OptionSet, Swift.Sequence, Swift.Codable {
  public let rawValue: Swift.Int
  public static let free: OpenDID_DataModel.VerifyAuthType
  public static let pin: OpenDID_DataModel.VerifyAuthType
  public static let bio: OpenDID_DataModel.VerifyAuthType
  public static let and: OpenDID_DataModel.VerifyAuthType
  public init(rawValue: Swift.Int)
  public typealias ArrayLiteralElement = OpenDID_DataModel.VerifyAuthType.Element
  public typealias Element = OpenDID_DataModel.VerifyAuthType
  public typealias Iterator = OpenDID_DataModel.OptionSetIterator<OpenDID_DataModel.VerifyAuthType>
  public typealias RawValue = Swift.Int
}
extension Swift.OptionSet where Self.RawValue == Swift.Int {
  public func makeIterator() -> OpenDID_DataModel.OptionSetIterator<Self>
}
public struct OptionSetIterator<Element> : Swift.IteratorProtocol where Element : Swift.OptionSet, Element.RawValue == Swift.Int {
  public init(element: Element)
  public mutating func next() -> Element?
}
public struct VCSchema : OpenDID_DataModel.Jsonable {
  public struct VCMetadata : OpenDID_DataModel.Jsonable {
    public var language: Swift.String
    public var formatVersion: Swift.String
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
  public struct CredentialSubject : OpenDID_DataModel.Jsonable {
    public struct Claim : OpenDID_DataModel.Jsonable {
      public struct Namespace : OpenDID_DataModel.Jsonable {
        public var id: Swift.String
        public var name: Swift.String
        public var ref: Swift.String?
        public func encode(to encoder: any Swift.Encoder) throws
        public init(from decoder: any Swift.Decoder) throws
      }
      public struct ClaimDef : OpenDID_DataModel.Jsonable {
        public var id: Swift.String
        public var caption: Swift.String
        public var type: OpenDID_DataModel.ClaimType
        public var format: OpenDID_DataModel.ClaimFormat
        public var hideValue: Swift.Bool?
        public var location: OpenDID_DataModel.Location?
        public var required: Swift.Bool?
        public var description: Swift.String?
        public var i18n: [Swift.String : Swift.String]?
        public func encode(to encoder: any Swift.Encoder) throws
        public init(from decoder: any Swift.Decoder) throws
      }
      public var namespace: OpenDID_DataModel.VCSchema.CredentialSubject.Claim.Namespace
      public var items: [OpenDID_DataModel.VCSchema.CredentialSubject.Claim.ClaimDef]
      public func encode(to encoder: any Swift.Encoder) throws
      public init(from decoder: any Swift.Decoder) throws
    }
    public var claims: [OpenDID_DataModel.VCSchema.CredentialSubject.Claim]
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
  public var id: Swift.String
  public var schema: Swift.String
  public var title: Swift.String
  public var description: Swift.String
  public var metadata: OpenDID_DataModel.VCSchema.VCMetadata
  public var credentialSubject: OpenDID_DataModel.VCSchema.CredentialSubject
}
extension OpenDID_DataModel.VCSchema : Swift.Codable {
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct VerifiableCredential : OpenDID_DataModel.Jsonable, Swift.Identifiable {
  public var context: [Swift.String]
  public var id: Swift.String
  public var type: [Swift.String]
  public var issuer: OpenDID_DataModel.VerifiableCredential.Issuer
  public var issuanceDate: Swift.String
  @OpenDID_DataModel.UTCDatetime public var validFrom: Swift.String {
    get
    set
    _modify
  }
  @OpenDID_DataModel.UTCDatetime public var validUntil: Swift.String {
    get
    set
    _modify
  }
  public var encoding: Swift.String
  public var formatVersion: Swift.String
  public var language: Swift.String
  public var evidence: [OpenDID_DataModel.VerifiableCredential.Evidence]
  public var credentialSchema: OpenDID_DataModel.VerifiableCredential.CredentialSchema
  public var credentialSubject: OpenDID_DataModel.VerifiableCredential.CredentialSubject
  public var proof: OpenDID_DataModel.VCProof
  public struct Issuer : OpenDID_DataModel.Jsonable {
    public var id: Swift.String
    public var name: Swift.String?
    public var certVcRef: Swift.String?
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
  public enum Evidence {
    case documentVerification(OpenDID_DataModel.VerifiableCredential.DocumentVerificationEvidence)
  }
  public enum Presence : Swift.String, Swift.Codable {
    case physical
    case digital
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
  public enum EvidenceType : Swift.String, Swift.Codable {
    case documentVerification
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
  public struct DocumentVerificationEvidence : OpenDID_DataModel.Jsonable {
    public var url: Swift.String?
    public var type: OpenDID_DataModel.VerifiableCredential.EvidenceType
    public var verifier: Swift.String
    public var evidenceDocument: Swift.String
    public var subjectPresence: OpenDID_DataModel.VerifiableCredential.Presence
    public var documentPresence: OpenDID_DataModel.VerifiableCredential.Presence
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
  public struct CredentialSchema : OpenDID_DataModel.Jsonable {
    public var id: Swift.String
    public var type: OpenDID_DataModel.CredentialSchemaType
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
  public struct CredentialSubject : OpenDID_DataModel.Jsonable {
    public var id: Swift.String
    public var claims: [OpenDID_DataModel.VerifiableCredential.Claim]
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
  public struct Claim : OpenDID_DataModel.Jsonable {
    public struct Internationalization : OpenDID_DataModel.Jsonable {
      public var caption: Swift.String
      public var value: Swift.String?
      public var digestSRI: Swift.String?
      public func encode(to encoder: any Swift.Encoder) throws
      public init(from decoder: any Swift.Decoder) throws
    }
    public var code: Swift.String
    public var caption: Swift.String
    public var value: Swift.String
    public var type: OpenDID_DataModel.ClaimType
    public var format: OpenDID_DataModel.ClaimFormat
    public var hideValue: Swift.Bool?
    public var location: OpenDID_DataModel.Location?
    public var digestSRI: Swift.String?
    public var i18n: [Swift.String : OpenDID_DataModel.VerifiableCredential.Claim.Internationalization]?
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
  public typealias ID = Swift.String
}
extension OpenDID_DataModel.VerifiableCredential : Swift.Codable {
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
extension OpenDID_DataModel.VerifiableCredential.Evidence : Swift.Codable {
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct Proof : OpenDID_DataModel.ProofProtocol {
  @OpenDID_DataModel.UTCDatetime public var created: Swift.String {
    get
    set
    _modify
  }
  public var proofPurpose: OpenDID_DataModel.ProofPurpose
  public var verificationMethod: Swift.String
  public var type: OpenDID_DataModel.ProofType?
  public var proofValue: Swift.String?
}
public struct VCProof : OpenDID_DataModel.ProofProtocol, OpenDID_DataModel.Jsonable {
  @OpenDID_DataModel.UTCDatetime public var created: Swift.String {
    get
    set
    _modify
  }
  public var proofPurpose: OpenDID_DataModel.ProofPurpose
  public var verificationMethod: Swift.String
  public var type: OpenDID_DataModel.ProofType?
  public var proofValue: Swift.String?
  public var proofValueList: [Swift.String]?
}
extension OpenDID_DataModel.Proof : Swift.Codable {
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
extension OpenDID_DataModel.VCProof : Swift.Codable {
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public protocol Jsonable : Swift.Decodable, Swift.Encodable {
  init(from jsonData: Foundation.Data) throws
  init(from jsonString: Swift.String) throws
  func toJsonData(isPretty: Swift.Bool) throws -> Foundation.Data
  func toJson(isPretty: Swift.Bool) throws -> Swift.String
}
extension OpenDID_DataModel.Jsonable {
  public init(from jsonData: Foundation.Data) throws
  public init(from jsonString: Swift.String) throws
  public func toJsonData(isPretty: Swift.Bool = false) throws -> Foundation.Data
  public func toJson(isPretty: Swift.Bool = false) throws -> Swift.String
}
public protocol ProofProtocol : OpenDID_DataModel.Jsonable {
  var created: Swift.String { get set }
  var verificationMethod: Swift.String { get set }
  var proofPurpose: OpenDID_DataModel.ProofPurpose { get set }
  var type: OpenDID_DataModel.ProofType? { get set }
  var proofValue: Swift.String? { get set }
}
public protocol ProofContainer : OpenDID_DataModel.Jsonable {
  var proof: OpenDID_DataModel.Proof? { get set }
}
public protocol ProofsContainer : OpenDID_DataModel.Jsonable {
  var proof: OpenDID_DataModel.Proof? { get set }
  var proofs: [OpenDID_DataModel.Proof]? { get set }
}
@propertyWrapper public struct UTCDatetime {
  public var wrappedValue: Swift.String {
    get
    set
  }
  public init(wrappedValue: Swift.String)
}
@propertyWrapper public struct DIDVersionId {
  public var wrappedValue: Swift.String {
    get
    set
  }
  public init(wrappedValue: Swift.String)
}
extension OpenDID_DataModel.ProfileType : Swift.Equatable {}
extension OpenDID_DataModel.ProfileType : Swift.Hashable {}
extension OpenDID_DataModel.ProfileType : Swift.RawRepresentable {}
extension OpenDID_DataModel.LogoImage.LogoImageType : Swift.Equatable {}
extension OpenDID_DataModel.LogoImage.LogoImageType : Swift.Hashable {}
extension OpenDID_DataModel.LogoImage.LogoImageType : Swift.RawRepresentable {}
extension OpenDID_DataModel.DIDDocument.DIDKeyType : Swift.Equatable {}
extension OpenDID_DataModel.DIDDocument.DIDKeyType : Swift.Hashable {}
extension OpenDID_DataModel.DIDDocument.DIDKeyType : Swift.RawRepresentable {}
extension OpenDID_DataModel.DIDDocument.DIDServiceType : Swift.Equatable {}
extension OpenDID_DataModel.DIDDocument.DIDServiceType : Swift.Hashable {}
extension OpenDID_DataModel.DIDDocument.DIDServiceType : Swift.RawRepresentable {}
extension OpenDID_DataModel.ClaimType : Swift.Equatable {}
extension OpenDID_DataModel.ClaimType : Swift.Hashable {}
extension OpenDID_DataModel.ClaimType : Swift.RawRepresentable {}
extension OpenDID_DataModel.ClaimFormat : Swift.Equatable {}
extension OpenDID_DataModel.ClaimFormat : Swift.Hashable {}
extension OpenDID_DataModel.ClaimFormat : Swift.RawRepresentable {}
extension OpenDID_DataModel.Location : Swift.Equatable {}
extension OpenDID_DataModel.Location : Swift.Hashable {}
extension OpenDID_DataModel.Location : Swift.RawRepresentable {}
extension OpenDID_DataModel.ProofPurpose : Swift.Equatable {}
extension OpenDID_DataModel.ProofPurpose : Swift.Hashable {}
extension OpenDID_DataModel.ProofPurpose : Swift.RawRepresentable {}
extension OpenDID_DataModel.ProofType : Swift.Equatable {}
extension OpenDID_DataModel.ProofType : Swift.Hashable {}
extension OpenDID_DataModel.ProofType : Swift.RawRepresentable {}
extension OpenDID_DataModel.AlgorithmType : Swift.Equatable {}
extension OpenDID_DataModel.AlgorithmType : Swift.Hashable {}
extension OpenDID_DataModel.AlgorithmType : Swift.RawRepresentable {}
extension OpenDID_DataModel.CredentialSchemaType : Swift.Equatable {}
extension OpenDID_DataModel.CredentialSchemaType : Swift.Hashable {}
extension OpenDID_DataModel.CredentialSchemaType : Swift.RawRepresentable {}
extension OpenDID_DataModel.EllipticCurveType : Swift.Equatable {}
extension OpenDID_DataModel.EllipticCurveType : Swift.Hashable {}
extension OpenDID_DataModel.EllipticCurveType : Swift.RawRepresentable {}
extension OpenDID_DataModel.SymmetricCipherType : Swift.Equatable {}
extension OpenDID_DataModel.SymmetricCipherType : Swift.Hashable {}
extension OpenDID_DataModel.SymmetricCipherType : Swift.RawRepresentable {}
extension OpenDID_DataModel.SymmetricPaddingType : Swift.Equatable {}
extension OpenDID_DataModel.SymmetricPaddingType : Swift.Hashable {}
extension OpenDID_DataModel.SymmetricPaddingType : Swift.RawRepresentable {}
extension OpenDID_DataModel.AuthType : Swift.Equatable {}
extension OpenDID_DataModel.AuthType : Swift.Hashable {}
extension OpenDID_DataModel.AuthType : Swift.RawRepresentable {}
extension OpenDID_DataModel.VerifiableCredential.Presence : Swift.Equatable {}
extension OpenDID_DataModel.VerifiableCredential.Presence : Swift.Hashable {}
extension OpenDID_DataModel.VerifiableCredential.Presence : Swift.RawRepresentable {}
extension OpenDID_DataModel.VerifiableCredential.EvidenceType : Swift.Equatable {}
extension OpenDID_DataModel.VerifiableCredential.EvidenceType : Swift.Hashable {}
extension OpenDID_DataModel.VerifiableCredential.EvidenceType : Swift.RawRepresentable {}
